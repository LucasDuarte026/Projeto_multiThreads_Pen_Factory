// para compilar: make
// para executar: make run

/*  Integrantes
    Lucas Sales Duarte  11734490
    Daniel Filho        13677114
    Daniel Umeda        13676541
    Manoel Thomaz       13676392
*/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>    //  Para o uso da função sleep()
#include <pthread.h>   //  Para uso das threads
#include <semaphore.h> //  Para uso dos semaforos

#define DELAY_COMPRA_CONSUMIDOR 1
#define COMPRA_POR_INTERACAO 2
#define ENVIO_MATERIA_INTERACAO 3
#define TEMPO_ENVIO_DEPFAB 1
#define TEMPO_PRODUCAO_CANETA 1
#define MAX_DEPOSITO_CANETA 8
#define MAX_MATERIA_PRIMA 40

pthread_t thread_list_ID[6];

int slots_disponiveis = MAX_DEPOSITO_CANETA;
int materia_prima_disponivel = MAX_MATERIA_PRIMA;
int quant_interation;
int canetasCompradas = 0;

pthread_mutex_t canetas_do_comprador = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t quant_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t acessar_deposito_caneta = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t acessar_deposito_materiaPrima = PTHREAD_MUTEX_INITIALIZER;

pthread_cond_t compra_liberada = PTHREAD_COND_INITIALIZER;
pthread_cond_t sinal_materia_prima = PTHREAD_COND_INITIALIZER;
pthread_cond_t sinal_deposito_caneta = PTHREAD_COND_INITIALIZER;

sem_t decrementa_materiaPrima;
sem_t materia_deslocada;
sem_t produza;
sem_t producao_concluida;
sem_t chegouCaneta;

/*
Suposições lógicas para descrição do projeto
    ->  Produtor tem um mini armazém de matéria prima para fabricar uma caneta por vez,
        assim como também as envia uma por vez (não tem armazém de produto pronto na fábrica,
        apenas de materia prima), pois é o que faz mais sentido (exemplo da fábrica volkswagem em aula).

    ->  Se há n canetas disponíveis no depósito e o comprador pedir m canetas, tal que m > n, o depósito envia apenas n canetas
        Pois não há como ser diferente.

    ->  Presume-se que o envio do deposito para a fabrica demore = "TEMPO_ENVIO_DEPFAB"
        independentemente de "ENVIO_MATERIA_INTERACAO". Ou seja, o caminhão que transporte
        demore o mesmo tempo, seja com 2 ou 20 unidades de matéria prima
            *Obs: A mesma lógica se aplica ao tempo de compra pelo comprador será DELAY_COMPRA_CONSUMIDOR
            independentemente de quantas irá comprar

*/

/*  RANKS:

        rank 0: função            = criador
        rank 1: thread_list_ID[1] = Depósito de Matéria Prima
        rank 2: thread_list_ID[2] = Célula de Fabricação de Canetas
        rank 3: thread_list_ID[3] = Controle
        rank 4: thread_list_ID[4] = Depósito de canetas
        rank 5: thread_list_ID[5] = Comprador
*/
// -------------------------- Funções acessoras --------------------------

// -------------------------- Threads --------------------------

void controle(void)
{
    printf("\niniciado controle");
    fflush(stdout);

    // Inicio da região crítica
    while (1)
    {
        pthread_mutex_lock(&acessar_deposito_materiaPrima);
        pthread_mutex_lock(&acessar_deposito_caneta);

        if (slots_disponiveis > 0)
        {
            if (slots_disponiveis > ENVIO_MATERIA_INTERACAO)
                quant_interation = ENVIO_MATERIA_INTERACAO;
            else
                quant_interation = slots_disponiveis;

            if (materia_prima_disponivel < quant_interation)
                quant_interation = materia_prima_disponivel;

            if (quant_interation > 0 && materia_prima_disponivel > 0) // Para produzir, tem de ter espaço
            {
                sem_post(&decrementa_materiaPrima);                                      // Manda o depósito enviar a materia prima
                pthread_cond_wait(&sinal_materia_prima, &acessar_deposito_materiaPrima); // Dá acesso ao deposito de materia prima e fica esperando o sinal para retomar o controle do estoque de materia prima
                sem_wait(&materia_deslocada);                                            // Espera até a materia prima ser deslocada entre oo depósito e a fábrica
                sem_post(&produza);                                                      // Assim que a materia prima chegar, começar a produzir n caneta
                sem_wait(&producao_concluida);                                           // Controle fica esperando a produção acabar
                sem_post(&chegouCaneta);                                                 // Ao acabar a produção, manda enviar umam caneta ao deposito
                pthread_cond_wait(&compra_liberada, &acessar_deposito_caneta);     // libera pro deposito o acesso do deposito e fica esperando o sinal pra voltar a ter acesso ao estoque de canetas

                pthread_mutex_lock(&canetas_do_comprador);
                printf("\nControle:  | Canetas compradas: %d | | Slots: %d | | Matéria Prima: %d|\n", canetasCompradas, slots_disponiveis, materia_prima_disponivel);
                fflush(stdout);
                pthread_mutex_unlock(&canetas_do_comprador);
            }
            else if (materia_prima_disponivel == 0) // Caso não tenha espaço no deposito de caneta e, agora, não tenha tambpem materia prima, termina o programa
            {
                //  Finalizar programa
                printf("\n\tCódigo finalizado. Estoque de materia prima acabou e o depósito de canetas está vazio");
                fflush(stdout);
                break;
            }
            else
            {
                printf("\nRodada obsoleta");
            }
        }
        pthread_mutex_unlock(&acessar_deposito_materiaPrima);
        pthread_mutex_unlock(&acessar_deposito_caneta);
    }
}

void depos_madeira(void)
{
    printf("\niniciado depos_madeira");
    fflush(stdout);

    while (1)
    {
        sem_wait(&decrementa_materiaPrima);

        // pthread_mutex_lock(&acessar_deposito_materiaPrima);

        pthread_mutex_lock(&acessar_deposito_materiaPrima); // Garante acecsso exclusivo ao estoque e o decrementa
        pthread_mutex_lock(&quant_mutex);                   // Obtém a quandidade de decremento do deposito de madeira
        materia_prima_disponivel -= quant_interation;       // Decrementa de fato
        pthread_mutex_unlock(&quant_mutex);
        pthread_mutex_unlock(&acessar_deposito_materiaPrima);

        pthread_cond_signal(&sinal_materia_prima);
        sleep(TEMPO_ENVIO_DEPFAB);
        sem_post(&materia_deslocada);
        // printf("\nDEPMAT: materia prima disponivel: %d", materia_prima_disponivel);
        fflush(stdout);
    }
}

void celula_fabrica(void)
{
    printf("\nIniciado celula_fabrica");
    fflush(stdout);

    while (1)
    {

        sem_wait(&produza); //  Ao aguardo do controle para produzir

        pthread_mutex_lock(&quant_mutex); //  Pegar rapidamente a quantidade de produções que será feita

        // printf("\nFAB:  Fabricando %d unidade", quant_interation);
        fflush(stdout);
        for (int i = 0; i < quant_interation; i++) // fabrica n canetas garantindo a quantidade ccerta que saiu do depósito
            sleep(TEMPO_PRODUCAO_CANETA);          // Tempo em que está fabricando um caneta

        pthread_mutex_unlock(&quant_mutex);
        sem_post(&producao_concluida);
    }
}

void depos_caneta(void)
{
    printf("\niniciado depos_caneta");
    fflush(stdout);
    while (1)
    {
        sem_wait(&chegouCaneta);                      //  Aguarda o controle avisar que chegou n canetas
        pthread_mutex_lock(&quant_mutex);             //  Pegar a quantidade de produções que será feita
        pthread_mutex_lock(&acessar_deposito_caneta); //  Garante exclusão mútua na quantidade de slots no armazém

        slots_disponiveis -= quant_interation; //  Decrementa a quantidade de slots, agora ocupadados por n canetas

        pthread_mutex_unlock(&quant_mutex);             //  Liberar acesso
        pthread_mutex_unlock(&acessar_deposito_caneta); //  Liberar acesso
        // pthread_cond_signal(&sinal_deposito_caneta);    //  Dar o sinal para o controle para o fim da cadeia de produçao
        pthread_cond_broadcast(&compra_liberada);          //  Mandar o sinal para o comprador diretamente em que pode-se olha a quantidade de canetas no estoque

        // printf("\nDEPCAN:   quantidade de canetas no depósito são %d e slots %d", MAX_DEPOSITO_CANETA - slots_disponiveis, slots_disponiveis);
        fflush(stdout);
    }
}

void comprador(void)
{
    printf("\niniciado comprador");
    fflush(stdout);
    while (1)
    {
        pthread_mutex_lock(&acessar_deposito_caneta);
        pthread_cond_wait(&compra_liberada, &acessar_deposito_caneta);

        pthread_mutex_lock(&canetas_do_comprador);
        int local_max = MAX_DEPOSITO_CANETA - slots_disponiveis;
        if (local_max > 0)
        {
            int interacao_compras;

            if (local_max < COMPRA_POR_INTERACAO) //  Há menos canetas disponíveis do que o pedido
                interacao_compras = local_max;
            else
                interacao_compras = COMPRA_POR_INTERACAO;

            for (int i = 0; i < interacao_compras; i++)
            {
                slots_disponiveis++;
                canetasCompradas++;
            }
            sleep(DELAY_COMPRA_CONSUMIDOR); // Delay por compra, independente da quantidade 

            printf("\nCOMPRADOR: acaba de comprar %d canetas | Total: %d", COMPRA_POR_INTERACAO, canetasCompradas);
            fflush(stdout);
            pthread_mutex_unlock(&canetas_do_comprador);
            pthread_mutex_unlock(&acessar_deposito_caneta);
        }
    }
}
void criador(void)
{
    //  Inicializar os semáforos
    sem_init(&decrementa_materiaPrima, 0, 0); //  Inicia o semaforo para controle de estoque de materia prima
    sem_init(&produza, 0, 0);                 //  Inicia o semaforo para não produzindo
    sem_init(&chegouCaneta, 0, 0);            //  Inicia o semaforo para o envio das canetas

    //  Criação das threads
    {
        if (pthread_create(&thread_list_ID[1], 0, (void *)depos_madeira, 0) != 0)
        {
            fprintf(stderr, "Erro ao criar o Célula de depósito de materia prima\n");
        }
        if (pthread_create(&thread_list_ID[2], 0, (void *)celula_fabrica, 0) != 0)
        {
            fprintf(stderr, "Erro ao criar o celula de fabricao de canetas\n");
        }
        if (pthread_create(&thread_list_ID[3], 0, (void *)controle, 0) != 0)
        {
            fprintf(stderr, "Erro ao criar o Controle\n");
        }
        if (pthread_create(&thread_list_ID[4], 0, (void *)depos_caneta, 0) != 0)
        {
            fprintf(stderr, "Erro ao criar o Depósito de canetas\n");
        }
        if (pthread_create(&thread_list_ID[5], 0, (void *)comprador, 0) != 0)
        {
            fprintf(stderr, "Erro ao criar o Comprador\n");
        }
        {
            //  Threads iniciadas e agora serão dadas o join

            pthread_join(thread_list_ID[1], NULL);
            printf("\nRank 1 saindo");
            fflush(stdout);
            pthread_join(thread_list_ID[2], NULL);
            printf("\nRank 2 saindo");
            fflush(stdout);
            pthread_join(thread_list_ID[3], NULL);
            printf("\nRank 3 saindo");
            fflush(stdout);
            pthread_join(thread_list_ID[4], NULL);
            printf("\nRank 4 saindo");
            fflush(stdout);
            //     pthread_join(thread_list_ID[5], NULL);
            //     printf("\nRank 5 saindo");
            fflush(stdout);
        }
    }
}

int main()
{
    criador();

    /* coisas a acertar no código:
        acertar essa linha pra == 0            if (estoque_materiaPrima <= 0 && slot_disponivel <= 0)



        destruir os semaforos aqui no final
    */

    return 0;
}