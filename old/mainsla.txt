// para compilar: make
// para executar: make run

/*  Integrantes
    Lucas Sales Duarte  11734490
    Daniel Filho        13677114
    Daniel Umeda        13676541
    Manoel Thomaz       13676392
*/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>    //  Para o uso da função sleep()
#include <pthread.h>   //  Para uso das threads
#include <semaphore.h> //  Para uso dos semaforos

// Macros pré definidas pelo usuário:
int MAX_MATERIA_PRIMA, ENVIO_MATERIA_INTERACAO, TEMPO_ENVIO_DEPFAB, TEMPO_PRODUCAO_CANETA, MAX_DEPOSITO_CANETA, COMPRA_POR_INTERACAO, DELAY_COMPRA_CONSUMIDOR;

pthread_t thread_list_ID[6];

int slots_disponiveis = MAX_DEPOSITO_CANETA;
int materia_prima_disponivel = MAX_MATERIA_PRIMA;
int quant_interation;
int canetasCompradas = 0;

pthread_mutex_t canetas_do_comprador = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t quant_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t acessar_deposito_caneta = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t acessar_deposito_materiaPrima = PTHREAD_MUTEX_INITIALIZER;

pthread_cond_t sinal_materia_prima = PTHREAD_COND_INITIALIZER;
pthread_cond_t sinal_deposito_caneta = PTHREAD_COND_INITIALIZER;
pthread_cond_t sinal_ao_criador = PTHREAD_COND_INITIALIZER;

sem_t decrementa_materiaPrima;
sem_t materia_deslocada;
sem_t produza;
sem_t producao_concluida;
sem_t liberar_deposito_caneta;

/*
Suposições lógicas para descrição do projeto
    ->  Produtor tem um mini armazém de matéria prima para fabricar uma caneta por vez,
        assim como também as envia uma por vez (não tem armazém de produto pronto na fábrica,
        apenas de materia prima), pois é o que faz mais sentido (exemplo da fábrica volkswagem em aula).

    ->  Se há n canetas disponíveis no depósito e o comprador pedir m canetas, tal que m > n, o depósito envia apenas n canetas
        Pois não há como ser diferente.

    ->  Presume-se que o envio do deposito para a fabrica demore = "TEMPO_ENVIO_DEPFAB"
        independentemente de "ENVIO_MATERIA_INTERACAO". Ou seja, o caminhão que transporte
        demore o mesmo tempo, seja com 2 ou 20 unidades de matéria prima
            *Obs: A mesma lógica se aplica ao tempo de compra pelo comprador será DELAY_COMPRA_CONSUMIDOR
            independentemente de quantas irá comprar

*/

/*  RANKS:

        rank 0: função            = criador
        rank 1: thread_list_ID[1] = Depósito de Matéria Prima
        rank 2: thread_list_ID[2] = Célula de Fabricação de Canetas
        rank 3: thread_list_ID[3] = Controle
        rank 4: thread_list_ID[4] = Depósito de canetas
        rank 5: thread_list_ID[5] = Comprador
*/
// -------------------------- Funções acessoras --------------------------

// -------------------------- Threads --------------------------

void controle(void)
{
    while (1) //   Variável controlada pelo criador para terminar esta thread
    {

        if (materia_prima_disponivel > 0 && slots_disponiveis > 0)
        {
            pthread_mutex_lock(&acessar_deposito_materiaPrima);
            pthread_mutex_lock(&acessar_deposito_caneta);
            if (slots_disponiveis > ENVIO_MATERIA_INTERACAO)
                quant_interation = ENVIO_MATERIA_INTERACAO;
            else
                quant_interation = slots_disponiveis;

            if (materia_prima_disponivel < quant_interation)
                quant_interation = materia_prima_disponivel;

            if (quant_interation > 0 && materia_prima_disponivel > 0) // Para produzir, tem de ter espaço
            {
                sem_post(&decrementa_materiaPrima);                                      // Manda o depósito enviar a materia prima
                pthread_cond_wait(&sinal_materia_prima, &acessar_deposito_materiaPrima); // Dá acesso ao deposito de materia prima e fica esperando o sinal para retomar o controle do estoque de materia prima
                sem_wait(&materia_deslocada);                                            // Espera até a materia prima ser deslocada entre oo depósito e a fábrica
                sem_post(&produza);                                                      // Assim que a materia prima chegar, começar a produzir n caneta
                sem_wait(&producao_concluida);                                           // Controle fica esperando a produção acabar
                sem_post(&liberar_deposito_caneta);                                      // Ao acabar a produção, manda enviar umam caneta ao deposito
                pthread_cond_wait(&sinal_deposito_caneta, &acessar_deposito_caneta);     // libera pro deposito o acesso do deposito e fica esperando o sinal pra voltar a ter acesso ao estoque de canetas

                // pthread_mutex_lock(&canetas_do_comprador);
                // printf("\nControle:  | Canetas compradas: %d | Slots: %d | Matéria Prima: %d |\n", canetasCompradas, slots_disponiveis, materia_prima_disponivel);
                // pthread_mutex_unlock(&canetas_do_comprador);
            }
            pthread_mutex_unlock(&acessar_deposito_caneta);
            pthread_mutex_unlock(&acessar_deposito_materiaPrima);
        }

        else if (slots_disponiveis < MAX_DEPOSITO_CANETA) //    Ainda tem slots, mas a materia prima acabou
        {
            /*  Anteriormente usado para um controle ao vivo das variaveis. Habilitar caso o desejo de ver

            pthread_mutex_lock(&acessar_deposito_materiaPrima);
            pthread_mutex_lock(&acessar_deposito_caneta);

            // quant_interation = COMPRA_POR_INTERACAO;
            pthread_mutex_lock(&canetas_do_comprador);
            // printf("\nControle:  | Canetas compradas: %d | Slots: %d | Matéria Prima: %d |\n", canetasCompradas, slots_disponiveis, materia_prima_disponivel);
            pthread_mutex_unlock(&canetas_do_comprador);

            pthread_mutex_unlock(&acessar_deposito_caneta);
            pthread_mutex_unlock(&acessar_deposito_materiaPrima);
            */
            pthread_cond_broadcast(&sinal_deposito_caneta); // libera o comprador o acesso do deposito para que compre as canetas finais do depósito
        }
        else if (slots_disponiveis == MAX_DEPOSITO_CANETA && materia_prima_disponivel == 0) // Caso acabou os slots e a materia prima, deve acabar
        {
            /*  Anteriormente usado para ver a ultima interação da thread controle. Habilitar caso o desejo de ver

            //  Finalizar programa
            pthread_mutex_lock(&acessar_deposito_materiaPrima);
            pthread_mutex_lock(&acessar_deposito_caneta);
            pthread_mutex_lock(&canetas_do_comprador);
            printf("\nControle:  | Canetas compradas: %d | Slots: %d | Matéria Prima: %d |\n", canetasCompradas, slots_disponiveis, materia_prima_disponivel);
            pthread_mutex_unlock(&canetas_do_comprador);
            pthread_mutex_unlock(&acessar_deposito_caneta);
            pthread_mutex_unlock(&acessar_deposito_materiaPrima);
            printf("\n\tCódigo finalizado. Estoque de materia prima acabou e o depósito de canetas está vazioz\n");

            */
        }
    }
}

void depos_madeira(void)
{

    while (1) //   Variável controlada pelo criador para terminar esta thread
    {
        sem_wait(&decrementa_materiaPrima);

        // pthread_mutex_lock(&acessar_deposito_materiaPrima);

        pthread_mutex_lock(&acessar_deposito_materiaPrima); // Garante acecsso exclusivo ao estoque e o decrementa
        pthread_mutex_lock(&quant_mutex);                   // Obtém a quandidade de decremento do deposito de madeira
        materia_prima_disponivel -= quant_interation;       // Decrementa de fato
        pthread_mutex_unlock(&quant_mutex);
        pthread_mutex_unlock(&acessar_deposito_materiaPrima);

        pthread_cond_signal(&sinal_materia_prima);
        sleep(TEMPO_ENVIO_DEPFAB);
        sem_post(&materia_deslocada);
        // printf("\nDEPMAT: materia prima disponivel: %d", materia_prima_disponivel);
    }
}

void celula_fabrica(void)
{

    while (1) //   Variável controlada pelo criador para terminar esta thread
    {

        sem_wait(&produza); //  Ao aguardo do controle para produzir

        pthread_mutex_lock(&quant_mutex); //  Pegar rapidamente a quantidade de produções que será feita

        // printf("\nFAB:  Fabricando %d unidade", quant_interation);
        for (int i = 0; i < quant_interation; i++) // fabrica n canetas garantindo a quantidade ccerta que saiu do depósito
            sleep(TEMPO_PRODUCAO_CANETA);          // Tempo em que está fabricando um caneta

        pthread_mutex_unlock(&quant_mutex);
        sem_post(&producao_concluida);
    }
}

void depos_caneta(void)
{
    while (1) //   Variável controlada pelo criador para terminar esta thread
    {
        sem_wait(&liberar_deposito_caneta);           //  Aguarda o controle avisar que chegou n canetas
        pthread_mutex_lock(&quant_mutex);             //  Pegar a quantidade de produções que será feita
        pthread_mutex_lock(&acessar_deposito_caneta); //  Garante exclusão mútua na quantidade de slots no armazém

        slots_disponiveis -= quant_interation; //  Decrementa a quantidade de slots, agora ocupadados por n canetas

        pthread_mutex_unlock(&quant_mutex);             //  Liberar acesso
        pthread_mutex_unlock(&acessar_deposito_caneta); //  Liberar acesso
        pthread_cond_broadcast(&sinal_deposito_caneta); //  Mandar o sinal para o comprador diretamente em que pode-se olha a quantidade de canetas no estoque

        // printf("\nDEPCAN:   quantidade de canetas no depósito são %d e slots %d", MAX_DEPOSITO_CANETA - slots_disponiveis, slots_disponiveis);
    }
}

void comprador(void)
{
    while (1) //   Variável controlada pelo criador para terminar esta thread
    {
        pthread_mutex_lock(&acessar_deposito_caneta);
        pthread_cond_wait(&sinal_deposito_caneta, &acessar_deposito_caneta);

        pthread_mutex_lock(&canetas_do_comprador);
        int local_max = MAX_DEPOSITO_CANETA - slots_disponiveis;
        if (local_max > 0)
        {
            int interacao_compras;

            if (local_max < COMPRA_POR_INTERACAO) //  Há menos canetas disponíveis do que o pedido
                interacao_compras = local_max;
            else
                interacao_compras = COMPRA_POR_INTERACAO;

            for (int i = 0; i < interacao_compras; i++)
            {
                slots_disponiveis++;
                canetasCompradas++;
            }
        }
        else
        {
        }
        pthread_mutex_unlock(&canetas_do_comprador);
        pthread_mutex_unlock(&acessar_deposito_caneta);
        pthread_cond_signal(&sinal_ao_criador);

        sleep(DELAY_COMPRA_CONSUMIDOR); // Delay por compra, independente da quantidade
    }
}

int criador(void)
{
    //  Inicializar os semáforos
    sem_init(&decrementa_materiaPrima, 0, 0); //  Inicia o semaforo para controle de estoque de materia prima
    sem_init(&produza, 0, 0);                 //  Inicia o semaforo para não produzindo
    sem_init(&liberar_deposito_caneta, 0, 0); //  Inicia o semaforo para o envio das canetas

    //  Criação das threads

    if (pthread_create(&thread_list_ID[1], 0, (void *)depos_madeira, 0) != 0)
    {
        fprintf(stderr, "Erro ao criar o Célula de depósito de materia prima\n");
    }
    printf("\nDepósito de Madeira iniciado!");

    if (pthread_create(&thread_list_ID[2], 0, (void *)celula_fabrica, 0) != 0)
    {
        fprintf(stderr, "Erro ao criar o celula de fabricao de canetas\n");
    }
    printf("\nCélula de Fabricação iniciado!");
    if (pthread_create(&thread_list_ID[3], 0, (void *)controle, 0) != 0)
    {
        fprintf(stderr, "Erro ao criar o Controle\n");
    }
    printf("\nControle iniciado!");
    if (pthread_create(&thread_list_ID[4], 0, (void *)depos_caneta, 0) != 0)
    {
        fprintf(stderr, "Erro ao criar o Depósito de canetas\n");
    }
    printf("\nDepósito de Canetas iniciado!");
    if (pthread_create(&thread_list_ID[5], 0, (void *)comprador, 0) != 0)
    {
        fprintf(stderr, "Erro ao criar o Comprador\n");
    }
    printf("\nComprador iniciado!");
    int contador_canetas = 0;
    while (contador_canetas < MAX_MATERIA_PRIMA)
    {
        pthread_mutex_lock(&canetas_do_comprador);
        pthread_cond_wait(&sinal_ao_criador, &canetas_do_comprador);
        if (canetasCompradas > contador_canetas)
        {

            printf("\nComprador comprou %2.d canetas nesta interação e o total já comprado é: %2.d", canetasCompradas - contador_canetas, canetasCompradas);
            fflush(stdout);
            contador_canetas = canetasCompradas;
        }
        else if (canetasCompradas == contador_canetas)
        {
            printf("\nNão houve compra nessa interação");
            fflush(stdout);
        }
        pthread_mutex_unlock(&canetas_do_comprador);
    }
    printf("\n\n-- -- -- -- Compra finalizada com sucesso!!-- -- -- -- \n");
    //  Finalizar os semáforos
    sem_destroy(&decrementa_materiaPrima);
    sem_destroy(&produza);
    sem_destroy(&liberar_deposito_caneta);

    //  Finalizar os mutexes
    pthread_mutex_destroy(&canetas_do_comprador);
    pthread_mutex_destroy(&quant_mutex);
    pthread_mutex_destroy(&acessar_deposito_caneta);
    pthread_mutex_destroy(&acessar_deposito_materiaPrima);

    //  Finalizar as variáveis de condição
    pthread_cond_destroy(&sinal_materia_prima);
    pthread_cond_destroy(&sinal_deposito_caneta);
    pthread_cond_destroy(&sinal_ao_criador);

    //   não foi dado join em nenhuma thread, pois basta o comprador ter comprado tudo que o programa pode ser finalizado com sucesso.
    return 0;
}

int main()
{

    scanf("%d %d %d", &MAX_MATERIA_PRIMA, &ENVIO_MATERIA_INTERACAO, &TEMPO_ENVIO_DEPFAB, &TEMPO_PRODUCAO_CANETA, &MAX_DEPOSITO_CANETA, &COMPRA_POR_INTERACAO & DELAY_COMPRA_CONSUMIDOR);

    return criador();
}